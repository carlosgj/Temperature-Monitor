

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Sep 21 12:12:27 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	dabs	1,0x7E,2
    14  0000                     
    15                           ; Version 1.40
    16                           ; Generated 01/12/2016 GMT
    17                           ; 
    18                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F1827 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  0006                     	;# 
    56  0007                     	;# 
    57  0008                     	;# 
    58  0009                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000D                     	;# 
    63  0011                     	;# 
    64  0012                     	;# 
    65  0013                     	;# 
    66  0014                     	;# 
    67  0015                     	;# 
    68  0016                     	;# 
    69  0016                     	;# 
    70  0017                     	;# 
    71  0018                     	;# 
    72  0019                     	;# 
    73  001A                     	;# 
    74  001B                     	;# 
    75  001C                     	;# 
    76  001E                     	;# 
    77  001F                     	;# 
    78  008C                     	;# 
    79  008D                     	;# 
    80  0091                     	;# 
    81  0092                     	;# 
    82  0093                     	;# 
    83  0094                     	;# 
    84  0095                     	;# 
    85  0096                     	;# 
    86  0097                     	;# 
    87  0098                     	;# 
    88  0099                     	;# 
    89  009A                     	;# 
    90  009B                     	;# 
    91  009B                     	;# 
    92  009C                     	;# 
    93  009D                     	;# 
    94  009E                     	;# 
    95  010C                     	;# 
    96  010D                     	;# 
    97  0111                     	;# 
    98  0112                     	;# 
    99  0113                     	;# 
   100  0114                     	;# 
   101  0115                     	;# 
   102  0116                     	;# 
   103  0117                     	;# 
   104  0118                     	;# 
   105  0119                     	;# 
   106  011A                     	;# 
   107  011B                     	;# 
   108  011D                     	;# 
   109  011E                     	;# 
   110  018C                     	;# 
   111  018D                     	;# 
   112  0191                     	;# 
   113  0191                     	;# 
   114  0192                     	;# 
   115  0193                     	;# 
   116  0193                     	;# 
   117  0193                     	;# 
   118  0194                     	;# 
   119  0195                     	;# 
   120  0196                     	;# 
   121  0199                     	;# 
   122  019A                     	;# 
   123  019B                     	;# 
   124  019B                     	;# 
   125  019B                     	;# 
   126  019B                     	;# 
   127  019C                     	;# 
   128  019C                     	;# 
   129  019D                     	;# 
   130  019E                     	;# 
   131  019F                     	;# 
   132  020C                     	;# 
   133  020D                     	;# 
   134  0211                     	;# 
   135  0211                     	;# 
   136  0212                     	;# 
   137  0212                     	;# 
   138  0213                     	;# 
   139  0213                     	;# 
   140  0214                     	;# 
   141  0214                     	;# 
   142  0215                     	;# 
   143  0215                     	;# 
   144  0215                     	;# 
   145  0216                     	;# 
   146  0216                     	;# 
   147  0217                     	;# 
   148  0217                     	;# 
   149  0219                     	;# 
   150  021A                     	;# 
   151  021B                     	;# 
   152  021C                     	;# 
   153  021D                     	;# 
   154  021E                     	;# 
   155  021F                     	;# 
   156  0291                     	;# 
   157  0291                     	;# 
   158  0292                     	;# 
   159  0293                     	;# 
   160  0294                     	;# 
   161  0295                     	;# 
   162  0295                     	;# 
   163  0296                     	;# 
   164  0298                     	;# 
   165  0298                     	;# 
   166  0299                     	;# 
   167  029A                     	;# 
   168  029B                     	;# 
   169  029C                     	;# 
   170  029C                     	;# 
   171  029D                     	;# 
   172  029E                     	;# 
   173  029E                     	;# 
   174  0311                     	;# 
   175  0311                     	;# 
   176  0312                     	;# 
   177  0313                     	;# 
   178  0318                     	;# 
   179  0318                     	;# 
   180  0319                     	;# 
   181  031A                     	;# 
   182  0394                     	;# 
   183  0395                     	;# 
   184  0396                     	;# 
   185  039A                     	;# 
   186  039C                     	;# 
   187  039D                     	;# 
   188  039E                     	;# 
   189  039F                     	;# 
   190  0415                     	;# 
   191  0416                     	;# 
   192  0417                     	;# 
   193  041C                     	;# 
   194  041D                     	;# 
   195  041E                     	;# 
   196  0FE4                     	;# 
   197  0FE5                     	;# 
   198  0FE6                     	;# 
   199  0FE7                     	;# 
   200  0FE8                     	;# 
   201  0FE9                     	;# 
   202  0FEA                     	;# 
   203  0FEB                     	;# 
   204  0FED                     	;# 
   205  0FEE                     	;# 
   206  0FEF                     	;# 
   207  0000                     	;# 
   208  0001                     	;# 
   209  0002                     	;# 
   210  0003                     	;# 
   211  0004                     	;# 
   212  0005                     	;# 
   213  0006                     	;# 
   214  0007                     	;# 
   215  0008                     	;# 
   216  0009                     	;# 
   217  000A                     	;# 
   218  000B                     	;# 
   219  000C                     	;# 
   220  000D                     	;# 
   221  0011                     	;# 
   222  0012                     	;# 
   223  0013                     	;# 
   224  0014                     	;# 
   225  0015                     	;# 
   226  0016                     	;# 
   227  0016                     	;# 
   228  0017                     	;# 
   229  0018                     	;# 
   230  0019                     	;# 
   231  001A                     	;# 
   232  001B                     	;# 
   233  001C                     	;# 
   234  001E                     	;# 
   235  001F                     	;# 
   236  008C                     	;# 
   237  008D                     	;# 
   238  0091                     	;# 
   239  0092                     	;# 
   240  0093                     	;# 
   241  0094                     	;# 
   242  0095                     	;# 
   243  0096                     	;# 
   244  0097                     	;# 
   245  0098                     	;# 
   246  0099                     	;# 
   247  009A                     	;# 
   248  009B                     	;# 
   249  009B                     	;# 
   250  009C                     	;# 
   251  009D                     	;# 
   252  009E                     	;# 
   253  010C                     	;# 
   254  010D                     	;# 
   255  0111                     	;# 
   256  0112                     	;# 
   257  0113                     	;# 
   258  0114                     	;# 
   259  0115                     	;# 
   260  0116                     	;# 
   261  0117                     	;# 
   262  0118                     	;# 
   263  0119                     	;# 
   264  011A                     	;# 
   265  011B                     	;# 
   266  011D                     	;# 
   267  011E                     	;# 
   268  018C                     	;# 
   269  018D                     	;# 
   270  0191                     	;# 
   271  0191                     	;# 
   272  0192                     	;# 
   273  0193                     	;# 
   274  0193                     	;# 
   275  0193                     	;# 
   276  0194                     	;# 
   277  0195                     	;# 
   278  0196                     	;# 
   279  0199                     	;# 
   280  019A                     	;# 
   281  019B                     	;# 
   282  019B                     	;# 
   283  019B                     	;# 
   284  019B                     	;# 
   285  019C                     	;# 
   286  019C                     	;# 
   287  019D                     	;# 
   288  019E                     	;# 
   289  019F                     	;# 
   290  020C                     	;# 
   291  020D                     	;# 
   292  0211                     	;# 
   293  0211                     	;# 
   294  0212                     	;# 
   295  0212                     	;# 
   296  0213                     	;# 
   297  0213                     	;# 
   298  0214                     	;# 
   299  0214                     	;# 
   300  0215                     	;# 
   301  0215                     	;# 
   302  0215                     	;# 
   303  0216                     	;# 
   304  0216                     	;# 
   305  0217                     	;# 
   306  0217                     	;# 
   307  0219                     	;# 
   308  021A                     	;# 
   309  021B                     	;# 
   310  021C                     	;# 
   311  021D                     	;# 
   312  021E                     	;# 
   313  021F                     	;# 
   314  0291                     	;# 
   315  0291                     	;# 
   316  0292                     	;# 
   317  0293                     	;# 
   318  0294                     	;# 
   319  0295                     	;# 
   320  0295                     	;# 
   321  0296                     	;# 
   322  0298                     	;# 
   323  0298                     	;# 
   324  0299                     	;# 
   325  029A                     	;# 
   326  029B                     	;# 
   327  029C                     	;# 
   328  029C                     	;# 
   329  029D                     	;# 
   330  029E                     	;# 
   331  029E                     	;# 
   332  0311                     	;# 
   333  0311                     	;# 
   334  0312                     	;# 
   335  0313                     	;# 
   336  0318                     	;# 
   337  0318                     	;# 
   338  0319                     	;# 
   339  031A                     	;# 
   340  0394                     	;# 
   341  0395                     	;# 
   342  0396                     	;# 
   343  039A                     	;# 
   344  039C                     	;# 
   345  039D                     	;# 
   346  039E                     	;# 
   347  039F                     	;# 
   348  0415                     	;# 
   349  0416                     	;# 
   350  0417                     	;# 
   351  041C                     	;# 
   352  041D                     	;# 
   353  041E                     	;# 
   354  0FE4                     	;# 
   355  0FE5                     	;# 
   356  0FE6                     	;# 
   357  0FE7                     	;# 
   358  0FE8                     	;# 
   359  0FE9                     	;# 
   360  0FEA                     	;# 
   361  0FEB                     	;# 
   362  0FED                     	;# 
   363  0FEE                     	;# 
   364  0FEF                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0008                     	;# 
   374  0009                     	;# 
   375  000A                     	;# 
   376  000B                     	;# 
   377  000C                     	;# 
   378  000D                     	;# 
   379  0011                     	;# 
   380  0012                     	;# 
   381  0013                     	;# 
   382  0014                     	;# 
   383  0015                     	;# 
   384  0016                     	;# 
   385  0016                     	;# 
   386  0017                     	;# 
   387  0018                     	;# 
   388  0019                     	;# 
   389  001A                     	;# 
   390  001B                     	;# 
   391  001C                     	;# 
   392  001E                     	;# 
   393  001F                     	;# 
   394  008C                     	;# 
   395  008D                     	;# 
   396  0091                     	;# 
   397  0092                     	;# 
   398  0093                     	;# 
   399  0094                     	;# 
   400  0095                     	;# 
   401  0096                     	;# 
   402  0097                     	;# 
   403  0098                     	;# 
   404  0099                     	;# 
   405  009A                     	;# 
   406  009B                     	;# 
   407  009B                     	;# 
   408  009C                     	;# 
   409  009D                     	;# 
   410  009E                     	;# 
   411  010C                     	;# 
   412  010D                     	;# 
   413  0111                     	;# 
   414  0112                     	;# 
   415  0113                     	;# 
   416  0114                     	;# 
   417  0115                     	;# 
   418  0116                     	;# 
   419  0117                     	;# 
   420  0118                     	;# 
   421  0119                     	;# 
   422  011A                     	;# 
   423  011B                     	;# 
   424  011D                     	;# 
   425  011E                     	;# 
   426  018C                     	;# 
   427  018D                     	;# 
   428  0191                     	;# 
   429  0191                     	;# 
   430  0192                     	;# 
   431  0193                     	;# 
   432  0193                     	;# 
   433  0193                     	;# 
   434  0194                     	;# 
   435  0195                     	;# 
   436  0196                     	;# 
   437  0199                     	;# 
   438  019A                     	;# 
   439  019B                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019C                     	;# 
   444  019C                     	;# 
   445  019D                     	;# 
   446  019E                     	;# 
   447  019F                     	;# 
   448  020C                     	;# 
   449  020D                     	;# 
   450  0211                     	;# 
   451  0211                     	;# 
   452  0212                     	;# 
   453  0212                     	;# 
   454  0213                     	;# 
   455  0213                     	;# 
   456  0214                     	;# 
   457  0214                     	;# 
   458  0215                     	;# 
   459  0215                     	;# 
   460  0215                     	;# 
   461  0216                     	;# 
   462  0216                     	;# 
   463  0217                     	;# 
   464  0217                     	;# 
   465  0219                     	;# 
   466  021A                     	;# 
   467  021B                     	;# 
   468  021C                     	;# 
   469  021D                     	;# 
   470  021E                     	;# 
   471  021F                     	;# 
   472  0291                     	;# 
   473  0291                     	;# 
   474  0292                     	;# 
   475  0293                     	;# 
   476  0294                     	;# 
   477  0295                     	;# 
   478  0295                     	;# 
   479  0296                     	;# 
   480  0298                     	;# 
   481  0298                     	;# 
   482  0299                     	;# 
   483  029A                     	;# 
   484  029B                     	;# 
   485  029C                     	;# 
   486  029C                     	;# 
   487  029D                     	;# 
   488  029E                     	;# 
   489  029E                     	;# 
   490  0311                     	;# 
   491  0311                     	;# 
   492  0312                     	;# 
   493  0313                     	;# 
   494  0318                     	;# 
   495  0318                     	;# 
   496  0319                     	;# 
   497  031A                     	;# 
   498  0394                     	;# 
   499  0395                     	;# 
   500  0396                     	;# 
   501  039A                     	;# 
   502  039C                     	;# 
   503  039D                     	;# 
   504  039E                     	;# 
   505  039F                     	;# 
   506  0415                     	;# 
   507  0416                     	;# 
   508  0417                     	;# 
   509  041C                     	;# 
   510  041D                     	;# 
   511  041E                     	;# 
   512  0FE4                     	;# 
   513  0FE5                     	;# 
   514  0FE6                     	;# 
   515  0FE7                     	;# 
   516  0FE8                     	;# 
   517  0FE9                     	;# 
   518  0FEA                     	;# 
   519  0FEB                     	;# 
   520  0FED                     	;# 
   521  0FEE                     	;# 
   522  0FEF                     	;# 
   523  009D                     _ADCON0bits	set	157
   524  009E                     _ADCON1bits	set	158
   525  009C                     _ADRESH	set	156
   526  009B                     _ADRESL	set	155
   527  008C                     _TRISAbits	set	140
   528  008D                     _TRISBbits	set	141
   529  018D                     _ANSELBbits	set	397
   530                           
   531                           ; #config settings
   532  0000                     
   533                           	psect	cinit
   534  07FB                     start_initialization:	
   535  07FB                     __initialization:	
   536                           
   537                           ; Clear objects allocated to COMMON
   538  07FB  01FB               	clrf	__pbssCOMMON& (0+127)
   539  07FC  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   540  07FD                     end_of_initialization:	
   541                           ;End of C runtime variable initialization code
   542                           
   543  07FD                     __end_of__initialization:	
   544  07FD  0020               	movlb	0
   545  07FE  3187  2F67         	ljmp	_main	;jump to C main() function
   546                           
   547                           	psect	bssCOMMON
   548  007B                     __pbssCOMMON:	
   549  007B                     _rawTemp:	
   550  007B                     	ds	2
   551                           
   552                           	psect	cstackCOMMON
   553  0070                     __pcstackCOMMON:	
   554  0070                     ?_init:	
   555  0070                     ??_init:	
   556                           ; 1 bytes @ 0x0
   557                           
   558  0070                     ?_loop:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  0070                     ?_readAnalog:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0070                     ??_readAnalog:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0070                     ?_sendReading:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0070                     ?_sendStatus:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0070                     ??_sendStatus:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0070                     ?_main:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     sendReading@reading:	
   580                           ; 1 bytes @ 0x0
   581                           
   582                           
   583                           ; 2 bytes @ 0x0
   584  0070                     	ds	2
   585  0072                     ??_sendReading:	
   586                           
   587                           ; 1 bytes @ 0x2
   588  0072                     	ds	1
   589  0073                     readAnalog@i:	
   590                           
   591                           ; 1 bytes @ 0x3
   592  0073                     	ds	1
   593  0074                     readAnalog@result:	
   594                           
   595                           ; 1 bytes @ 0x4
   596  0074                     	ds	1
   597  0075                     ??_loop:	
   598                           
   599                           ; 1 bytes @ 0x5
   600  0075                     	ds	2
   601  0077                     loop@countdown:	
   602                           
   603                           ; 2 bytes @ 0x7
   604  0077                     	ds	2
   605  0079                     loop@ADCattempts:	
   606                           
   607                           ; 1 bytes @ 0x9
   608  0079                     	ds	1
   609  007A                     loop@ADCsuccess:	
   610                           
   611                           ; 1 bytes @ 0xA
   612  007A                     	ds	1
   613  007B                     ??_main:	
   614                           
   615                           	psect	maintext
   616  0767                     __pmaintext:	
   617                           ; 1 bytes @ 0xB
   618 ;;
   619 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   620 ;;
   621 ;; *************** function _main *****************
   622 ;; Defined at:
   623 ;;		line 30 in file "main.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;		None
   626 ;; Auto vars:     Size  Location     Type
   627 ;;		None
   628 ;; Return value:  Size  Location     Type
   629 ;;                  1    wreg      void 
   630 ;; Registers used:
   631 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   632 ;; Tracked objects:
   633 ;;		On entry : B1F/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   637 ;;      Params:         0       0       0       0       0       0
   638 ;;      Locals:         0       0       0       0       0       0
   639 ;;      Temps:          0       0       0       0       0       0
   640 ;;      Totals:         0       0       0       0       0       0
   641 ;;Total ram usage:        0 bytes
   642 ;; Hardware stack levels required when called:    2
   643 ;; This function calls:
   644 ;;		_init
   645 ;;		_loop
   646 ;; This function is called by:
   647 ;;		Startup code after reset
   648 ;; This function uses a non-reentrant model
   649 ;;
   650                           
   651                           
   652                           ;psect for function _main
   653  0767                     _main:	
   654                           
   655                           ;main.c: 31: init();
   656                           
   657                           ;incstack = 0
   658                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   659  0767  3187  276E  3187   	fcall	_init
   660  076A                     l617:	
   661                           ;main.c: 32: while(1){
   662                           
   663                           
   664                           ;main.c: 33: loop();
   665  076A  3187  2779  3187   	fcall	_loop
   666  076D  2F6A               	goto	l617
   667  076E                     __end_of_main:	
   668                           
   669                           	psect	text1
   670  0779                     __ptext1:	
   671 ;; *************** function _loop *****************
   672 ;; Defined at:
   673 ;;		line 51 in file "main.c"
   674 ;; Parameters:    Size  Location     Type
   675 ;;		None
   676 ;; Auto vars:     Size  Location     Type
   677 ;;  countdown       2    7[COMMON] unsigned int 
   678 ;;  ADCsuccess      1   10[COMMON] unsigned char 
   679 ;;  ADCattempts     1    9[COMMON] unsigned char 
   680 ;; Return value:  Size  Location     Type
   681 ;;                  1    wreg      void 
   682 ;; Registers used:
   683 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   684 ;; Tracked objects:
   685 ;;		On entry : 0/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   689 ;;      Params:         0       0       0       0       0       0
   690 ;;      Locals:         4       0       0       0       0       0
   691 ;;      Temps:          2       0       0       0       0       0
   692 ;;      Totals:         6       0       0       0       0       0
   693 ;;Total ram usage:        6 bytes
   694 ;; Hardware stack levels used:    1
   695 ;; Hardware stack levels required when called:    1
   696 ;; This function calls:
   697 ;;		_readAnalog
   698 ;;		_sendReading
   699 ;;		_sendStatus
   700 ;; This function is called by:
   701 ;;		_main
   702 ;; This function uses a non-reentrant model
   703 ;;
   704                           
   705                           
   706                           ;psect for function _loop
   707  0779                     _loop:	
   708                           
   709                           ;main.c: 53: unsigned char ADCsuccess = 255;
   710                           
   711                           ;incstack = 0
   712                           ; Regs used in _loop: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   713  0779  30FF               	movlw	255
   714  077A  00F5               	movwf	??_loop
   715  077B  0875               	movf	??_loop,w
   716  077C  00FA               	movwf	loop@ADCsuccess
   717                           
   718                           ;main.c: 54: unsigned char ADCattempts = 0;
   719  077D  01F9               	clrf	loop@ADCattempts
   720                           
   721                           ;main.c: 55: while(ADCsuccess != 0 && ADCattempts < 4){
   722  077E  2F8A               	goto	l599
   723  077F                     l595:	
   724                           
   725                           ;main.c: 56: ADCsuccess = readAnalog(&rawTemp);
   726  077F  307B               	movlw	(low (_rawTemp| 0))& (0+255)
   727  0780  3187  27B7  3187   	fcall	_readAnalog
   728  0783  00F5               	movwf	??_loop
   729  0784  0875               	movf	??_loop,w
   730  0785  00FA               	movwf	loop@ADCsuccess
   731                           
   732                           ;main.c: 57: ADCattempts++;
   733  0786  3001               	movlw	1
   734  0787  00F5               	movwf	??_loop
   735  0788  0875               	movf	??_loop,w
   736  0789  07F9               	addwf	loop@ADCattempts,f
   737  078A                     l599:	
   738  078A  087A               	movf	loop@ADCsuccess,w
   739  078B  1903               	btfsc	3,2
   740  078C  2F91               	goto	l603
   741  078D  3004               	movlw	4
   742  078E  0279               	subwf	loop@ADCattempts,w
   743  078F  1C03               	skipc
   744  0790  2F7F               	goto	l595
   745  0791                     l603:	
   746                           
   747                           ;main.c: 58: }
   748                           ;main.c: 59: if(ADCsuccess == 0){
   749  0791  087A               	movf	loop@ADCsuccess,w
   750  0792  1D03               	btfss	3,2
   751  0793  2F9B               	goto	l607
   752                           
   753                           ;main.c: 61: sendReading(rawTemp);
   754  0794  087C               	movf	_rawTemp+1,w
   755  0795  00F1               	movwf	sendReading@reading+1
   756  0796  087B               	movf	_rawTemp,w
   757  0797  00F0               	movwf	sendReading@reading
   758  0798  3187  2765  3187   	fcall	_sendReading
   759  079B                     l607:	
   760                           ;main.c: 63: else{
   761                           
   762                           ;main.c: 62: }
   763                           
   764                           
   765                           ;main.c: 66: }
   766                           ;main.c: 67: sendStatus();
   767  079B  3187  2766  3187   	fcall	_sendStatus
   768                           
   769                           ;main.c: 68: unsigned int countdown = 300;
   770  079E  302C               	movlw	44
   771  079F  00F7               	movwf	loop@countdown
   772  07A0  3001               	movlw	1
   773  07A1  00F8               	movwf	loop@countdown+1
   774  07A2                     l613:	
   775                           ;main.c: 69: while(countdown > 0){
   776                           
   777  07A2  0877               	movf	loop@countdown,w
   778  07A3  0478               	iorwf	loop@countdown+1,w
   779  07A4  1903               	btfsc	3,2
   780  07A5  0008               	return
   781                           
   782                           ;main.c: 70: _delay((unsigned long)((1000)*(16000000/4000.0)));
   783  07A6  3015               	movlw	21
   784  07A7  00F6               	movwf	??_loop+1
   785  07A8  304B               	movlw	75
   786  07A9  00F5               	movwf	??_loop
   787  07AA  30BE               	movlw	190
   788  07AB                     u127:	
   789  07AB  0B89               	decfsz	9,f
   790  07AC  2FAB               	goto	u127
   791  07AD  0BF5               	decfsz	??_loop,f
   792  07AE  2FAB               	goto	u127
   793  07AF  0BF6               	decfsz	??_loop+1,f
   794  07B0  2FAB               	goto	u127
   795  07B1  3200               	nop2
   796                           
   797                           ;main.c: 71: countdown--;
   798  07B2  3001               	movlw	1
   799  07B3  02F7               	subwf	loop@countdown,f
   800  07B4  3000               	movlw	0
   801  07B5  3BF8               	subwfb	loop@countdown+1,f
   802  07B6  2FA2               	goto	l613
   803  07B7                     __end_of_loop:	
   804                           
   805                           	psect	text2
   806  0766                     __ptext2:	
   807 ;; *************** function _sendStatus *****************
   808 ;; Defined at:
   809 ;;		line 9 in file "comm.c"
   810 ;; Parameters:    Size  Location     Type
   811 ;;		None
   812 ;; Auto vars:     Size  Location     Type
   813 ;;		None
   814 ;; Return value:  Size  Location     Type
   815 ;;                  1    wreg      unsigned char 
   816 ;; Registers used:
   817 ;;		None
   818 ;; Tracked objects:
   819 ;;		On entry : 0/0
   820 ;;		On exit  : 0/0
   821 ;;		Unchanged: 0/0
   822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   823 ;;      Params:         0       0       0       0       0       0
   824 ;;      Locals:         0       0       0       0       0       0
   825 ;;      Temps:          0       0       0       0       0       0
   826 ;;      Totals:         0       0       0       0       0       0
   827 ;;Total ram usage:        0 bytes
   828 ;; Hardware stack levels used:    1
   829 ;; This function calls:
   830 ;;		Nothing
   831 ;; This function is called by:
   832 ;;		_loop
   833 ;; This function uses a non-reentrant model
   834 ;;
   835                           
   836                           
   837                           ;psect for function _sendStatus
   838  0766                     _sendStatus:	
   839                           
   840                           ;incstack = 0
   841                           ; Regs used in _sendStatus: []
   842  0766  0008               	return
   843  0767                     __end_of_sendStatus:	
   844                           
   845                           	psect	text3
   846  0765                     __ptext3:	
   847 ;; *************** function _sendReading *****************
   848 ;; Defined at:
   849 ;;		line 5 in file "comm.c"
   850 ;; Parameters:    Size  Location     Type
   851 ;;  reading         2    0[COMMON] unsigned int 
   852 ;; Auto vars:     Size  Location     Type
   853 ;;		None
   854 ;; Return value:  Size  Location     Type
   855 ;;                  1    wreg      unsigned char 
   856 ;; Registers used:
   857 ;;		None
   858 ;; Tracked objects:
   859 ;;		On entry : 0/0
   860 ;;		On exit  : 0/0
   861 ;;		Unchanged: 0/0
   862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   863 ;;      Params:         2       0       0       0       0       0
   864 ;;      Locals:         0       0       0       0       0       0
   865 ;;      Temps:          0       0       0       0       0       0
   866 ;;      Totals:         2       0       0       0       0       0
   867 ;;Total ram usage:        2 bytes
   868 ;; Hardware stack levels used:    1
   869 ;; This function calls:
   870 ;;		Nothing
   871 ;; This function is called by:
   872 ;;		_loop
   873 ;; This function uses a non-reentrant model
   874 ;;
   875                           
   876                           
   877                           ;psect for function _sendReading
   878  0765                     _sendReading:	
   879                           
   880                           ;incstack = 0
   881                           ; Regs used in _sendReading: []
   882  0765  0008               	return
   883  0766                     __end_of_sendReading:	
   884                           
   885                           	psect	text4
   886  07B7                     __ptext4:	
   887 ;; *************** function _readAnalog *****************
   888 ;; Defined at:
   889 ;;		line 4 in file "analog.c"
   890 ;; Parameters:    Size  Location     Type
   891 ;;  result          1    wreg     PTR unsigned int 
   892 ;;		 -> rawTemp(2), 
   893 ;; Auto vars:     Size  Location     Type
   894 ;;  result          1    4[COMMON] PTR unsigned int 
   895 ;;		 -> rawTemp(2), 
   896 ;;  i               1    3[COMMON] unsigned char 
   897 ;; Return value:  Size  Location     Type
   898 ;;                  1    wreg      unsigned char 
   899 ;; Registers used:
   900 ;;		wreg, fsr1l, fsr1h, status,2, status,0
   901 ;; Tracked objects:
   902 ;;		On entry : 0/0
   903 ;;		On exit  : 0/0
   904 ;;		Unchanged: 0/0
   905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   906 ;;      Params:         0       0       0       0       0       0
   907 ;;      Locals:         2       0       0       0       0       0
   908 ;;      Temps:          3       0       0       0       0       0
   909 ;;      Totals:         5       0       0       0       0       0
   910 ;;Total ram usage:        5 bytes
   911 ;; Hardware stack levels used:    1
   912 ;; This function calls:
   913 ;;		Nothing
   914 ;; This function is called by:
   915 ;;		_loop
   916 ;; This function uses a non-reentrant model
   917 ;;
   918                           
   919                           
   920                           ;psect for function _readAnalog
   921  07B7                     _readAnalog:	
   922                           
   923                           ;incstack = 0
   924                           ; Regs used in _readAnalog: [wreg+fsr1l+fsr1h+status,2+status,0]
   925                           ;readAnalog@result stored from wreg
   926  07B7  00F4               	movwf	readAnalog@result
   927                           
   928                           ;analog.c: 5: ADCON0bits.CHS = 0b01001;
   929  07B8  0021               	movlb	1	; select bank1
   930  07B9  081D               	movf	29,w	;volatile
   931  07BA  3983               	andlw	-125
   932  07BB  3824               	iorlw	36
   933  07BC  009D               	movwf	29	;volatile
   934                           
   935                           ;analog.c: 6: ADCON1bits.ADCS = 0b101;
   936  07BD  081E               	movf	30,w	;volatile
   937  07BE  398F               	andlw	-113
   938  07BF  3850               	iorlw	80
   939  07C0  009E               	movwf	30	;volatile
   940                           
   941                           ;analog.c: 7: ADCON1bits.ADFM = 1;
   942  07C1  179E               	bsf	30,7	;volatile
   943                           
   944                           ;analog.c: 8: ADCON0bits.ADON = 1;
   945  07C2  141D               	bsf	29,0	;volatile
   946                           
   947                           ;analog.c: 11: _delay((unsigned long)((10)*(16000000/4000000.0)));
   948  07C3  300D               	movlw	13
   949  07C4                     u137:	
   950  07C4  0B89               	decfsz	9,f
   951  07C5  2FC4               	goto	u137
   952  07C6  0000               	nop
   953                           
   954                           ;analog.c: 12: unsigned char i = 60;
   955  07C7  303C               	movlw	60
   956  07C8  00F0               	movwf	??_readAnalog
   957  07C9  0870               	movf	??_readAnalog,w
   958  07CA  00F3               	movwf	readAnalog@i
   959                           
   960                           ;analog.c: 13: ADCON0bits.ADGO = 1;
   961  07CB  0021               	movlb	1	; select bank1
   962  07CC  149D               	bsf	29,1	;volatile
   963  07CD                     l55:	
   964                           ;analog.c: 14: while(i>0){
   965                           
   966  07CD  0873               	movf	readAnalog@i,w
   967  07CE  1D03               	btfss	3,2
   968                           
   969                           ;analog.c: 15: if(!ADCON0bits.ADGO){
   970  07CF  1C9D               	btfss	29,1	;volatile
   971  07D0  2FD4               	goto	l543
   972                           
   973                           ;analog.c: 17: }
   974                           ;analog.c: 18: i--;
   975                           
   976                           ;analog.c: 16: break;
   977  07D1  3001               	movlw	1
   978  07D2  02F3               	subwf	readAnalog@i,f
   979  07D3  2FCD               	goto	l55
   980  07D4                     l543:	
   981                           
   982                           ;analog.c: 19: }
   983                           ;analog.c: 20: if(i>0){
   984  07D4  0873               	movf	readAnalog@i,w
   985  07D5  1903               	btfsc	3,2
   986  07D6  2FF9               	goto	l557
   987                           
   988                           ;analog.c: 21: *result = 0;
   989  07D7  0874               	movf	readAnalog@result,w
   990  07D8  0086               	movwf	6
   991  07D9  0187               	clrf	7
   992  07DA  3000               	movlw	0
   993  07DB  3FC0               	movwi [0]fsr1
   994  07DC  3FC1               	movwi [1]fsr1
   995                           
   996                           ;analog.c: 23: *result |= ((ADRESH & 0b11) << 8);
   997  07DD  081C               	movf	28,w	;volatile
   998  07DE  3903               	andlw	3
   999  07DF  00F0               	movwf	??_readAnalog
  1000  07E0  01F1               	clrf	??_readAnalog+1
  1001  07E1  0870               	movf	??_readAnalog,w
  1002  07E2  00F1               	movwf	??_readAnalog+1
  1003  07E3  01F0               	clrf	??_readAnalog
  1004  07E4  0874               	movf	readAnalog@result,w
  1005  07E5  0086               	movwf	6
  1006  07E6  0187               	clrf	7
  1007  07E7  0870               	movf	??_readAnalog,w
  1008  07E8  0481               	iorwf	1,f
  1009  07E9  3141               	addfsr 1,1
  1010  07EA  0871               	movf	??_readAnalog+1,w
  1011  07EB  0481               	iorwf	1,f
  1012                           
  1013                           ;analog.c: 25: *result |= ADRESL;
  1014  07EC  081B               	movf	27,w	;volatile
  1015  07ED  00F0               	movwf	??_readAnalog
  1016  07EE  01F1               	clrf	??_readAnalog+1
  1017  07EF  0874               	movf	readAnalog@result,w
  1018  07F0  0086               	movwf	6
  1019  07F1  0187               	clrf	7
  1020  07F2  0870               	movf	??_readAnalog,w
  1021  07F3  0481               	iorwf	1,f
  1022  07F4  3141               	addfsr 1,1
  1023  07F5  0871               	movf	??_readAnalog+1,w
  1024  07F6  0481               	iorwf	1,f
  1025                           
  1026                           ;analog.c: 26: return 0;
  1027  07F7  3000               	movlw	0
  1028                           
  1029                           ;analog.c: 27: }
  1030  07F8  0008               	return
  1031  07F9                     l557:	
  1032                           
  1033                           ;analog.c: 28: else{
  1034                           ;analog.c: 29: return 1;
  1035  07F9  3001               	movlw	1
  1036  07FA  0008               	return
  1037  07FB                     __end_of_readAnalog:	
  1038                           
  1039                           	psect	text5
  1040  076E                     __ptext5:	
  1041 ;; *************** function _init *****************
  1042 ;; Defined at:
  1043 ;;		line 37 in file "main.c"
  1044 ;; Parameters:    Size  Location     Type
  1045 ;;		None
  1046 ;; Auto vars:     Size  Location     Type
  1047 ;;		None
  1048 ;; Return value:  Size  Location     Type
  1049 ;;                  1    wreg      void 
  1050 ;; Registers used:
  1051 ;;		None
  1052 ;; Tracked objects:
  1053 ;;		On entry : 0/0
  1054 ;;		On exit  : 0/0
  1055 ;;		Unchanged: 0/0
  1056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1057 ;;      Params:         0       0       0       0       0       0
  1058 ;;      Locals:         0       0       0       0       0       0
  1059 ;;      Temps:          0       0       0       0       0       0
  1060 ;;      Totals:         0       0       0       0       0       0
  1061 ;;Total ram usage:        0 bytes
  1062 ;; Hardware stack levels used:    1
  1063 ;; This function calls:
  1064 ;;		Nothing
  1065 ;; This function is called by:
  1066 ;;		_main
  1067 ;; This function uses a non-reentrant model
  1068 ;;
  1069                           
  1070                           
  1071                           ;psect for function _init
  1072  076E                     _init:	
  1073                           
  1074                           ;main.c: 39: TRISAbits.TRISA0 = 1;
  1075                           
  1076                           ;incstack = 0
  1077                           ; Regs used in _init: []
  1078  076E  0021               	movlb	1	; select bank1
  1079  076F  140C               	bsf	12,0	;volatile
  1080                           
  1081                           ;main.c: 40: TRISAbits.TRISA1 = 1;
  1082  0770  148C               	bsf	12,1	;volatile
  1083                           
  1084                           ;main.c: 41: TRISAbits.TRISA2 = 1;
  1085  0771  150C               	bsf	12,2	;volatile
  1086                           
  1087                           ;main.c: 42: TRISAbits.TRISA3 = 1;
  1088  0772  158C               	bsf	12,3	;volatile
  1089                           
  1090                           ;main.c: 43: TRISAbits.TRISA4 = 1;
  1091  0773  160C               	bsf	12,4	;volatile
  1092                           
  1093                           ;main.c: 45: TRISBbits.TRISB5 = 0;
  1094  0774  128D               	bcf	13,5	;volatile
  1095                           
  1096                           ;main.c: 47: TRISBbits.TRISB3 = 1;
  1097  0775  158D               	bsf	13,3	;volatile
  1098                           
  1099                           ;main.c: 48: ANSELBbits.ANSB3 = 1;
  1100  0776  0023               	movlb	3	; select bank3
  1101  0777  158D               	bsf	13,3	;volatile
  1102  0778  0008               	return
  1103  0779                     __end_of_init:	
  1104  007E                     btemp	set	126	;btemp
  1105  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      13
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    readAnalog@result	PTR unsigned int  size(1) Largest target is 2
		 -> rawTemp(COMMON[2]), 


Critical Paths under _main in COMMON

    _main->_loop
    _loop->_readAnalog

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     246
                               _init
                               _loop
 ---------------------------------------------------------------------------------
 (1) _loop                                                 6     6      0     246
                                              5 COMMON     6     6      0
                         _readAnalog
                        _sendReading
                         _sendStatus
 ---------------------------------------------------------------------------------
 (2) _sendStatus                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sendReading                                          2     0      2      53
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _readAnalog                                           5     5      0      99
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
   _loop
     _readAnalog
     _sendReading
     _sendStatus

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      B       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0       D      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Sep 21 12:12:27 2017

            __CFG_CP$OFF 0000                       l55 07CD              __CFG_LVP$ON 0000  
                    l603 0791                      l613 07A2                      l543 07D4  
                    l607 079B                      l617 076A                      l557 07F9  
                    l595 077F                      l599 078A                      u127 07AB  
                    u137 07C4             __CFG_CPD$OFF 0000             __CFG_BORV$LO 0000  
                    wreg 0009             __CFG_FOSC$HS 0000             __CFG_WDTE$ON 0000  
           __CFG_WRT$OFF 0000                     _main 0767                     _init 076E  
                   _loop 0779                     fsr1h 0007                     indf1 0001  
                   fsr1l 0006                     btemp 007E            __CFG_BOREN$ON 0000  
                   start 0002            __CFG_IESO$OFF 0000            __CFG_MCLRE$ON 0000  
                  ?_main 0070                    ?_init 0070                    ?_loop 0070  
         __CFG_FCMEN$OFF 0000                    status 0003                    wtemp0 007E  
        __initialization 07FB             __end_of_main 076E             __end_of_init 0779  
           __end_of_loop 07B7                   ??_main 007B                   ??_init 0070  
           ?_sendReading 0070                   ??_loop 0075           __CFG_PLLEN$OFF 0000  
                 _ADRESH 009C                   _ADRESL 009B              readAnalog@i 0073  
         __CFG_PWRTE$OFF 0000           __CFG_STVREN$ON 0000            loop@countdown 0077  
__end_of__initialization 07FD           __pcstackCOMMON 0070               __pmaintext 0767  
   __size_of_sendReading 0001               _readAnalog 07B7                  __ptext1 0779  
                __ptext2 0766                  __ptext3 0765                  __ptext4 07B7  
                __ptext5 076E                  _rawTemp 007B     end_of_initialization 07FD  
             _sendStatus 0766                _TRISAbits 008C                _TRISBbits 008D  
            ?_readAnalog 0070      start_initialization 07FB         readAnalog@result 0074  
            ?_sendStatus 0070              __pbssCOMMON 007B                ___latbits 0001  
    __size_of_readAnalog 0044            ??_sendReading 0072      __size_of_sendStatus 0001  
        loop@ADCattempts 0079               _ADCON0bits 009D               _ADCON1bits 009E  
    __end_of_sendReading 0766             ??_readAnalog 0070               _ANSELBbits 018D  
     __end_of_readAnalog 07FB             ??_sendStatus 0070            __size_of_main 0007  
          __size_of_init 000B            __size_of_loop 003E       sendReading@reading 0070  
            _sendReading 0765           loop@ADCsuccess 007A       __end_of_sendStatus 0767  
      __CFG_CLKOUTEN$OFF 0000  
